# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  name: Default

parameters:
  - name: wizDebug
    type: boolean
    default: false
  - name: wizPolicyHitsOnly
    type: boolean
    default: true
  - name: wizScanPolicies
    type: string
    default: "thuan-test-wizcli-high"
  - name: wizSucceedOnFailures
    type: boolean
    default: false
    
steps:
- script: echo Hello, world!
  displayName: 'Run a one-line script'

- script: |
    echo Add other tasks to build, test, and deploy your project.
    echo See https://aka.ms/yaml
  displayName: 'Run a multi-line script'

# - task: wiz@0
#   displayName: Scan directory
#   inputs:
#     command: dir
#     clientid: ${{ parameters.wizClientid}}
#     secret: $(WIZ_CLIENT_SECRET)
#     succeedOnFailures: ${{ parameters.wizSucceedOnFailures}}
#     policyHitsOnly: ${{ parameters.wizPolicyHitsOnly}}
#     scanPolicies: ${{ parameters.wizScanPolicies }}
#     scanTags: directory
#     wizCliPath: '/Users/thuan.dang/tmp'
#     path: ${{ parameters.wizPath }}
#     debug: ${{ parameters.wizDebug }}


# - task: CmdLine@2
#   inputs:
#     script: |
#       echo "##[command]Obtaining WizCLI from the inter-webs..."
#       sudo curl -o /usr/bin/wizcli https://downloads.wiz.io/wizcli/latest/wizcli-linux-amd64
#       echo "##[command]Making WizCLI executable"
#       sudo chmod +x /usr/bin/wizcli
#       /usr/bin/./wizcli auth --id ${{ parameters.wizClientid}} --secret $(WIZ_CLIENT_SECRET)
#   displayName: Download latest WizCLI and Authenticate


# - task: wiz@0
#   inputs:
#     command: 'image'
#     clientid: $(WIZ_CLIENT_ID)
#     secret: $(WIZ_CLIENT_SECRET)
#     image: 'alpine:3.10'
#     succeedOnFailures: false
#     debug: false
#     sensitiveData: false
#     scanPolicies: '${{ parameters.wizScanPolicies }}'
#     scanTags: 'cicd=ado'
#     authRetries: '2'
#     wizCliPath: '/tmp'
#     driver: "mountWithLayers"
#     sudo: true


- script: |
    echo "Pulling wizcli"
    docker pull public-registry.wiz.io/wiz-app/wizcli:0
    docker tag public-registry.wiz.io/wiz-app/wizcli:0 wizcli:latest
    docker run -v ~/.wiz:/cli wizcli:latest version

    echo "Auth"
    docker run -v ~/.wiz:/cli wizcli:latest --no-style auth --id "$WIZ_CLIENT_ID" --secret "$WIZ_CLIENT_SECRET"

    echo "Running scan"
    docker pull alpine:3.10
    docker run --security-opt apparmor:unconfined --cap-add SYS_ADMIN -v /var/lib/docker:/var/lib/docker -v /var/run/docker.sock:/var/run/docker.sock -v ~/.wiz:/cli wizcli:latest --no-style docker scan --image alpine:3.10 --policy 'thuan-test-wizcli-high' --driver mountWithLayers
    
    # docker run \
    #   --security-opt apparmor:unconfined \
    #   --cap-add SYS_ADMIN \
    #   -v /var/lib/docker:/var/lib/docker \
    #   -v /var/run/docker.sock:/var/run/docker.sock \
    #   -v "$(Agent.HomeDirectory)/.wiz:/cli" \
    #   "$WIZ_CLI_IMAGE" docker scan --image "$(DOCKER_IMAGE_NAME):$(DOCKER_IMAGE_TAG)" --policy-hits-only --driver mountWithLayers